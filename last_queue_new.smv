-- Coded by Eldar Timraleev © 2020-2021. --

-- ----------------------------------------------------------------------
-- Случайный выбор клиента из очереди.

-- ----------------------------------------------------------------------
-- ------------------------------- MAIN
-- ----------------------------------------------------------------------

MODULE main

VAR
    -- Макс. количество клиентских процессов == количеству мест в зале ожидания.
    client_1 : process client(1, self);
    client_2 : process client(2, self);
    client_3 : process client(3, self);
    client_4 : process client(4, self);

    -- Замок для остановки хода глобального счетчика времени;
    -- Каждый клиент обладает своим замком.
    timer_lock : array 1.._M of boolean;

    M : 0.._M;  -- Текущее количество свободных мест в зале ожидания;

    -- NOT_COME     - клиент еще не пришел (его не существует);
    -- WAIT         - клиент ожидает обслуживания;
    -- SERVICING    - клиент обслуживается в данный момент;
    -- SERVICED     - клиент обслужен и уходит;
    -- COMPLAIN     - клиент пишет жалобу, не дождавшись обслуживания;
    client_states : array 1.._M of { NOT_COME, WAIT, SERVICING, SERVICED, COMPLAIN };

    -- Окна обслуживания: 0 - окно свободно; i - окно занято клиентом i.
    windows : array 1.._W of 0.._M;

DEFINE
    _M := 4;    -- Макс. количество свободных мест в зале ожидания (равно кол-ву процессов-клиентов).
    _W := 2;    -- Количество окон.
    _K := 4;    -- Запас терпения клиента.

    -- Состояние отдельных окон.
    win_1 := windows[1];
    win_2 := windows[2];

    -- Имеется ли свободное окно.
    free_windows := (win_1 = 0)
                  | (win_2 = 0)
                  ;

    -- Есть возможность какому-то клиенту занять какое-то свободное окно.
    can_take_window := (free_windows) & (M <= _M);

    -- Заблокирован ли глобальный счетчик времени.
    -- Блокировка нужна, поскольку может возникнуть ситуация, когда, например, клиент находится в состояние "готов подойти к окну",
    -- а выполнение все время передается процессу счетчика времени, в результате чего возникает бредовая ситуация, когда
    -- клиент может бесконечно идти к окну обслуживания, занимая его и не обслуживаясь.
    -- Или когда окно свободно, а тупой таймер все время занимает процессор, - тогда клиент не сможет занять окно.
    is_timer_locked :=    can_take_window
                        | timer_lock[1]
                        | timer_lock[2]
                        | timer_lock[3]
                        | timer_lock[4]
                        ;

    -- Можно ли уменшить счетчик ожидания для клиентов.
    can_dec_1K := ((client_1.state = WAIT) & (client_1.K > 0)) & !is_timer_locked;
    can_dec_2K := ((client_2.state = WAIT) & (client_2.K > 0)) & !is_timer_locked;
    can_dec_3K := ((client_3.state = WAIT) & (client_3.K > 0)) & !is_timer_locked;
    can_dec_4K := ((client_4.state = WAIT) & (client_4.K > 0)) & !is_timer_locked;

    -- Можно ли уменшить счетчик обслуживания для клиентов.
    can_dec_1C := ((client_1.state = SERVICING) & (client_1.C > 0)) & !is_timer_locked;
    can_dec_2C := ((client_2.state = SERVICING) & (client_2.C > 0)) & !is_timer_locked;
    can_dec_3C := ((client_3.state = SERVICING) & (client_3.C > 0)) & !is_timer_locked;
    can_dec_4C := ((client_4.state = SERVICING) & (client_4.C > 0)) & !is_timer_locked;

    freze_time_1 := can_dec_1K | can_dec_1C;
    freze_time_2 := can_dec_2K | can_dec_2C;
    freze_time_3 := can_dec_3K | can_dec_3C;
    freze_time_4 := can_dec_4K | can_dec_4C;

    -- Когда произошел тик, счетчик времени блокируется до передачи управление каждому из потоков клиентов.
    tick_happened :=  freze_time_1
                    | freze_time_2
                    | freze_time_3
                    | freze_time_4
                    ;

ASSIGN
    init(M) := _M;
    
    init(windows[1]) := 0;
    init(windows[2]) := 0;

    init(client_states[1]) := NOT_COME;
    init(client_states[2]) := NOT_COME;
    init(client_states[3]) := NOT_COME;
    init(client_states[4]) := NOT_COME;
    
    init(timer_lock[1]) := FALSE;
    init(timer_lock[2]) := FALSE;
    init(timer_lock[3]) := FALSE;
    init(timer_lock[4]) := FALSE;

    -- Выполняет роль глобального времени, изменяющего значения всем за один проход.

    next(client_1.K) := case can_dec_1K : client_1.K - 1; TRUE : client_1.K; esac;
    next(client_2.K) := case can_dec_2K : client_2.K - 1; TRUE : client_2.K; esac;
    next(client_3.K) := case can_dec_3K : client_3.K - 1; TRUE : client_3.K; esac;
    next(client_4.K) := case can_dec_4K : client_4.K - 1; TRUE : client_4.K; esac;

    next(client_1.C) := case can_dec_1C : client_1.C - 1; TRUE : client_1.C; esac;
    next(client_2.C) := case can_dec_2C : client_2.C - 1; TRUE : client_2.C; esac;
    next(client_3.C) := case can_dec_3C : client_3.C - 1; TRUE : client_3.C; esac;
    next(client_4.C) := case can_dec_4C : client_4.C - 1; TRUE : client_4.C; esac;

    next(timer_lock[1]) := case tick_happened : TRUE; TRUE : timer_lock[1]; esac;
    next(timer_lock[2]) := case tick_happened : TRUE; TRUE : timer_lock[2]; esac;
    next(timer_lock[3]) := case tick_happened : TRUE; TRUE : timer_lock[3]; esac;
    next(timer_lock[4]) := case tick_happened : TRUE; TRUE : timer_lock[4]; esac;

FAIRNESS running;
--JUSTICE TRUE; -- Исключает из проверки конечные пути. Проверяются только бесконечные (см. стр. 39 - NuSMV user manual).

-- Клиенты никогда не напишут жалобы.
CTLSPEC
    AG  !(
          client_1.state = COMPLAIN
        | client_2.state = COMPLAIN
        | client_3.state = COMPLAIN
        | client_4.state = COMPLAIN
        )

-- Пришедший раньше начнет обслуживаться раньше.
LTLSPEC
    ! F (client_2.state = WAIT & client_3.state = WAIT & client_2.K < client_3.K
    & X (client_2.state = WAIT & client_3.state = SERVICING))

-- ----------------------------------------------------------------------
-- ------------------------------- CLIENT
-- ----------------------------------------------------------------------

MODULE client(i, main)

VAR
    K : 0..main._K;     -- Время ожидания клиента.
    C : 0..main._K;     -- Время обслуживания клиента окном.

DEFINE
    state := main.client_states[i]; -- Текущее состояние клиента.
    M := main.M;

    -- Определяют для каждого места в зале ожидания, следующий ли в очереди клиент, занявший его.
    nq_1 := (i = 1) & !(main.client_2.state = WAIT & main.client_2.K > K) & !(main.client_3.state = WAIT & main.client_3.K > K)
                    & !(main.client_4.state = WAIT & main.client_4.K > K)
                    ;
    nq_2 := (i = 2) & !(main.client_1.state = WAIT & main.client_1.K > K) & !(main.client_3.state = WAIT & main.client_3.K > K)
                    & !(main.client_4.state = WAIT & main.client_4.K > K)
                    ;
    nq_3 := (i = 3) & !(main.client_1.state = WAIT & main.client_1.K > K) & !(main.client_2.state = WAIT & main.client_2.K > K)
                    & !(main.client_4.state = WAIT & main.client_4.K > K)
                    ;
    nq_4 := (i = 4) & !(main.client_1.state = WAIT & main.client_1.K > K) & !(main.client_2.state = WAIT & main.client_2.K > K)
                    & !(main.client_3.state = WAIT & main.client_3.K > K)
                    ;

    -- Следующий ли данный клиент в очереди на обслуживание.
    next_in_queue :=  nq_1
                    | nq_2
                    | nq_3
                    | nq_4
                    ;

    is_client_can_come          := (state = NOT_COME) & (M > 0);
    is_client_will_complain     := (state = WAIT) & (K = 0);
    is_client_will_leave        := ((state = COMPLAIN) | (state = SERVICED)) & (M < main._M);
    is_client_can_go_to_window  := (state = WAIT) & (K > 0) & (main.free_windows) & (next_in_queue);
    is_client_serviced          := (state = SERVICING) & (C = 0);

ASSIGN
    init(K) := 0;
    init(C) := 0;
    
    next(main.M) := case
        is_client_can_come                  : M - 1;
        is_client_will_leave                : M + 1;
        TRUE                                : M;
    esac;

    next(K) := case
        is_client_can_come                  : main._K;  -- Очередное время ожидания клиента.
        is_client_can_go_to_window          : 0;        -- Обнуляем, когда клиент перестал ждать.
        TRUE                                : K;
    esac;

    next(C) := case
        is_client_can_go_to_window          : 1..3;     -- Очередное время обслуживания клиента.
        is_client_serviced                  : 0;        -- Обнуляем, когда клиент обслужен.
        TRUE                                : C;
    esac;

    next(main.client_states[i]) := case
        is_client_can_come                  : WAIT;         -- Клиент приходит в зал.
        is_client_will_complain             : COMPLAIN;     -- Превышено время ожидания клиента.
        is_client_can_go_to_window          : SERVICING;    -- Клиент начинает обслуживаться.
        is_client_serviced                  : SERVICED;     -- Клиент завершает обслуживаться.
        is_client_will_leave                : NOT_COME;     -- Клиент уходит.
        TRUE                                : state;
    esac;

    -- Будем останавливать счет времени, чтобы клиенты успевали
    -- освободить окно, если они уже обслужились.

    next(main.timer_lock[i]) := case
        is_client_can_come                  : TRUE; -- Клиент только пришел. Не нужно понижать ему счетчик времени ожидания.
        is_client_will_complain             : TRUE; -- Клиент пишет жалобу. Подождем пока соберется уходить, потом включим время. 
        is_client_serviced                  : TRUE; -- Клиент обслужен. Подождем пока соберется уходить, потом включим время. 
        TRUE                                : FALSE;
    esac;

    -- Окна занимаются в приоритете возрастания номеров: 1 -> 2 -> ...

    next(main.windows[1]) := case
        (main.win_1 = 0) & is_client_can_go_to_window                           : i mod main._M;
        (main.win_1 = i) & is_client_serviced                                   : 0;
        TRUE                                                                    : main.win_1;
    esac;

    next(main.windows[2]) := case
        (main.win_2 = 0) & (main.win_1 != 0) & is_client_can_go_to_window       : i mod main._M;
        (main.win_2 = i) & is_client_serviced                                   : 0;
        TRUE                                                                    : main.win_2;
    esac;

FAIRNESS running;