-- ----------------------------------------------------------------------
-- ------------------------------- MAIN
-- ----------------------------------------------------------------------

MODULE main

DEFINE
	M := 5;		-- кол-во мест в зале (диапазон 2,3,5)
	N := 3; 	-- кол-во окон (диапазон 2,3,5)
	K := 15;	-- время терпения клиента
	
VAR
	mfs_sim : process mfc_simulator (mfc_places, clients); -- МФЦ, наполняется списком клиентов
	mfc_places : array 1..M of -1..K; -- Места в зале. Значения: 0 - свободно, > 0 - оставшееся время ожидания клиента.
	
	win_0 : process window (0, M, mfc_places, win_states);
	win_1 : process window (1, M, mfc_places, win_states);
	win_2 : process window (2, M, mfc_places, win_states);
	win_states : array 1..N of {FREE, READY, BUSY}; -- состояния окна (свободно, готовится принять клиента, занято)

ASSIGN
	init(mfc_places[0]) := 0;
	init(mfc_places[1]) := 0;
	init(mfc_places[2]) := 0;
	init(mfc_places[3]) := 0;
	init(mfc_places[4]) := 0;


-- ----------------------------------------------------------------------
-- ------------------------ СИМУЛЯТОР МФЦ
-- ----------------------------------------------------------------------
	
-- Управляет очередью и списком клиентов.
MODULE mfc_simulator(mfc_places, clients)
	
ASSIGN
	esac;
	
FAIRNESS
   running


-- ----------------------------------------------------------------------
-- ------------------------ ОКНО ОБСЛУЖИВАНИЯ
-- ----------------------------------------------------------------------
	
-- Случайным образом может добавить нового клиента, а может не добавлять.
MODULE window(i, m, mfc_places, win_states)
DEFINE
	win_state := win_states[i]; -- Состояние окна.
VAR
	timer : 0..3; -- Время обслуживания клиента окном от 1 до 3 минут. 0 - таймер остановлен или клиент обслужен.
	queue_id: 0..m; -- Индекс в очереди для данного окна.
ASSIGN
	init(queue_id) := 0;
	next(queue_id) := case
		TRUE: 0;
	esac;

	init(win_states[i]) := FREE;
	next(win_states[i]) := case
		(win_state = FREE) & (mfc_places[queue_id] > 0): READY;
		(win_state = READY): BUSY;
		(win_state = BUSY) & (timer = 0): FREE;
		TRUE: win_state;
	esac;

	init(timer) := 0;
	next(timer) := case
		(win_state = READY): 1..3;
		(timer > 0): timer - 1;
		TRUE: timer;
	esac;

	next(mfc_places[queue_id]) := case
		(win_state = FREE) & (mfc_places[queue_id] > 0): 0; -- Клиент вызывается, место в зале освобождается.
		TRUE: mfc_places[queue_id];
	esac;
